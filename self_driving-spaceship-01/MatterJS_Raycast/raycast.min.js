"use strict";var _createClass=function(){function c(d,e){for(var g,f=0;f<e.length;f++)g=e[f],g.enumerable=g.enumerable||!1,g.configurable=!0,"value"in g&&(g.writable=!0),Object.defineProperty(d,g.key,g)}return function(d,e,f){return e&&c(d.prototype,e),f&&c(d,f),d}}();function _classCallCheck(c,d){if(!(c instanceof d))throw new TypeError("Cannot call a class as a function")}function raycast(c,d,e){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:!0;d=vec2.fromOther(d),e=vec2.fromOther(e);for(var l,f=Matter.Query.ray(c,d,e),g=[],h=new ray(d,e),j=f.length-1;0<=j;j--){l=ray.bodyCollisions(h,f[j].body);for(var m=l.length-1;0<=m;m--)g.push(l[m])}return n&&g.sort(function(o,p){return o.point.distance(d)-p.point.distance(d)}),g}var raycol=function c(d,e,f,g){_classCallCheck(this,c),this.body=d,this.point=e,this.normal=f,this.verts=g},ray=function(){function c(d,e){_classCallCheck(this,c),this.start=d,this.end=e}return _createClass(c,[{key:"yValueAt",value:function yValueAt(d){return this.offsetY+this.slope*d}},{key:"xValueAt",value:function xValueAt(d){return(d-this.offsetY)/this.slope}},{key:"pointInBounds",value:function pointInBounds(d){var e=Math.min(this.start.x,this.end.x),f=Math.max(this.start.x,this.end.x),g=Math.min(this.start.y,this.end.y),h=Math.max(this.start.y,this.end.y);return d.x>=e&&d.x<=f&&d.y>=g&&d.y<=h}},{key:"calculateNormal",value:function calculateNormal(d){var e=this.difference,f=e.normalized().rotate(Math.PI/2),g=e.normalized().rotate(Math.PI/-2);return this.start.plus(f).distance(d)<this.start.plus(g).distance(d)?f:g}},{key:"difference",get:function get(){return this.end.minus(this.start)}},{key:"slope",get:function get(){var d=this.difference;return d.y/d.x}},{key:"offsetY",get:function get(){return this.start.y-this.slope*this.start.x}},{key:"isHorizontal",get:function get(){return compareNum(this.start.y,this.end.y)}},{key:"isVertical",get:function get(){return compareNum(this.start.x,this.end.x)}}],[{key:"intersect",value:function intersect(d,e){if(d.isVertical&&e.isVertical)return null;if(d.isVertical)return new vec2(d.start.x,e.yValueAt(d.start.x));if(e.isVertical)return new vec2(e.start.x,d.yValueAt(e.start.x));if(compareNum(d.slope,e.slope))return null;if(d.isHorizontal)return new vec2(e.xValueAt(d.start.y),d.start.y);if(e.isHorizontal)return new vec2(d.xValueAt(e.start.y),e.start.y);var f=(e.offsetY-d.offsetY)/(d.slope-e.slope);return new vec2(f,d.yValueAt(f))}},{key:"collisionPoint",value:function collisionPoint(d,e){var f=c.intersect(d,e);return f?d.pointInBounds(f)?e.pointInBounds(f)?f:null:null:null}},{key:"bodyEdges",value:function bodyEdges(d){for(var e=[],f=d.parts.length-1;0<=f;f--)for(var h,g=d.parts[f].vertices.length-1;0<=g;g--){h=g+1,h>=d.parts[f].vertices.length&&(h=0);var j=new c(vec2.fromOther(d.parts[f].vertices[g]),vec2.fromOther(d.parts[f].vertices[h]));j.verts=[d.parts[f].vertices[g],d.parts[f].vertices[h]],e.push(j)}return e}},{key:"bodyCollisions",value:function bodyCollisions(d,e){for(var j,f=[],g=c.bodyEdges(e),h=g.length-1;0<=h;h--)if(j=c.collisionPoint(d,g[h]),j){var l=g[h].calculateNormal(d.start);f.push(new raycol(e,j,l,g[h].verts))}return f}}]),c}();function compareNum(c,d){var e=2<arguments.length&&arguments[2]!==void 0?arguments[2]:1e-5;return Math.abs(d-c)<=e}